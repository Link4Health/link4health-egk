name: Build and publish Egk Release
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'  # Ignore docs changes to prevent triggering this workflow
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to create or update'
        required: true

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write  # Permissions to create and manage pull requests

jobs:
  release:
    runs-on: macos-latest
    steps:
      - name: Checkout Egk library
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}  # Dynamisch den Branch setzen
          fetch-depth: 0

      - name: Egk grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Set up git identity
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set up Gradle Wrapper
        uses: gradle/actions/wrapper-validation@v3

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: ''

      - name: Install Android SDK
        run: sdkmanager "platform-tools" "platforms;android-34"

      - name: Extract version information
        run: |
          majorEgkAndroid=$(grep '^\s*majorEgkAndroid\s*=' gradle.properties | sed 's/.*=\s*//')
          echo "Extracted majorSdk: $majorEgkAndroid"
          minorEgkAndroid=$(grep '^\s*minorEgkAndroid\s*=' gradle.properties | sed 's/.*=\s*//')
          echo "Extracted minorSdk: $minorEgkAndroid"
          patchEgkAndroid=$(grep '^\s*patchEgkAndroid\s*=' gradle.properties | sed 's/.*=\s*//')
          echo "Extracted patchSdk: $patchEgkAndroid"
          echo "MAJOR_EGK_API_VERSION=$majorEgkAndroid" >> $GITHUB_ENV
          echo "MINOR_EGK_API_VERSION=$minorEgkAndroid" >> $GITHUB_ENV
          echo "PATCH_EGK_API_VERSION=$patchEgkAndroid" >> $GITHUB_ENV
          echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c 1-7)" >> $GITHUB_ENV
          echo "TAG_NAME=v${majorEgkAndroid}.${minorEgkAndroid}.${patchEgkAndroid}" >> $GITHUB_ENV

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/gradle.properties
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Create gradle.properties
        run: |
          mkdir -p ~/.gradle
          echo "nvdApiKey=${{ secrets.NVD_API_KEY }}" >> ~/.gradle/gradle.properties
          echo "contextUrl=${{ secrets.ARTIFACTS_CONTEXT_URL }}" >> ~/.gradle/gradle.properties
          echo "nexusUsername=${{ secrets.NEXUS_USERNAME }}" >> ~/.gradle/gradle.properties
          echo "nexusPassword=${{ secrets.NEXUS_PASSWORD }}" >> ~/.gradle/gradle.properties
          echo "anonymous=false" >> ~/.gradle/gradle.properties
          echo "org.gradle.internal.publish.checksums.insecure=true" >> ~/.gradle/gradle.properties

      - name: Build Egk Release
        run: |
          ./gradlew clean :egk:assembleRelease

      - name: Publish Egk Release
        run: |
          ./gradlew :egk:publishLink4HealthEgkLibraryPublicationToLink4HealthNexusRepository

      - name: Verify SDK AAR
        run: |
          echo "Verifying existence of AAR..."
          ls -la egk/build/outputs/aar/

      - name: Upload SDK AAR
        id: upload_sdk_aar
        uses: actions/upload-artifact@v4
        with:
          name: Link4health-SDK-Release
          path: egk/build/outputs/aar

      - name: Set Tag Name
        id: set_tag_name
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "TAG_NAME=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          else
            TAG_NAME="v${{ env.MAJOR_EGK_API_VERSION }}.${{ env.MINOR_EGK_API_VERSION }}.${{ env.PATCH_EGK_API_VERSION }}"
            echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          fi

      - name: Check if Release exists
        id: check_release
        run: |
          RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.TAG_NAME }}"
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $RELEASE_URL)
          echo "$response" > response.json
          echo "RELEASE_RESPONSE=$(<response.json jq -c)" >> $GITHUB_ENV

      - name: Delete existing release
        if: env.RELEASE_RESPONSE != 'null'
        run: |
          RELEASE_ID=$(echo '${{ env.RELEASE_RESPONSE }}' | jq -r '.id')
          if [[ "$RELEASE_ID" != "null" && "$RELEASE_ID" != "" ]]; then
            echo "Deleting release $RELEASE_ID"
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
          fi

      - name: Create or Update Git Tag
        id: create_tag
        run: |
          TAG_NAME="${{ env.TAG_NAME }}"
          git tag -fa "$TAG_NAME" -m "Release $TAG_NAME"

      - name: Push Tag to Repository
        id: push_tag
        env:
          GH_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
        run: |
          TAG_NAME="${{ env.TAG_NAME }}"
          git push origin "$TAG_NAME" --force

      - name: Read release notes
        id: get_release_notes
        run: |
          if [[ ! -f RELEASENOTES.md ]]; then
            echo "::error::RELEASENOTES.md file not found"
            exit 1
          fi
          release_notes=$(cat RELEASENOTES.md)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$release_notes" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Download Release AAR
        uses: actions/download-artifact@v4
        with:
          name: Link4health-SDK-Release
          path: downloaded_files/

      - name: Display structure of downloaded files
        run: ls -R downloaded_files

      - name: Check if AAB und mapping files exist
        run: |
          aar_path="downloaded_files/link4health-SDK-${{ env.MAJOR_SDK_VERSION }}.${{ env.MINOR_SDK_VERSION }}.${{ env.PATCH_SDK_VERSION }}-${{ github.run_number }}-${{ env.SHORT_SHA }}.aar"
          echo "Checking for AAR at path: $aar_path"
          if [[ -f "$aar_path" ]]; then
            echo "AAR file exists at $aar_path."
          else
            echo "::error::AAR file does not exist."
            exit 1
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: |
            downloaded_files/*.aar
          body: ${{ env.RELEASE_NOTES }}
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
